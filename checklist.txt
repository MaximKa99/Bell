БД
1. Названия разделять нижним подчёркиванием (full_name, is_active и т.п.)
2. В названии таблиц не использовать множественное число
3. Явно задавать ограничение количества символов для varchar
4. На все внешние ключи и поля, по которым производится поиск, должны быть индексы
5. Название индекса IX_<название таблицы>_<название поля>, уникальный индекс - UX_<название таблицы>_<название поля>

Java
1. Не использовать wildcard import (*)
2. Не использовать System.out.println и e.printStackTrace()
3. Всегда явно обозначать границы блоков фигурными скобками

плохо:
if (...)
    return;

if (...) return;

хорошо:
if (...) {
    return;
}

4. Не затирать информацию об исключениях.

Очень плохо:
try {
    ...
} catch (SQLException e) {
    //пустой catch-блок
}

Плохо:
try {
    ...
} catch (SQLException e) {
    trow new RuntimeException(); //Информация об SQLException теряется.
}

Лучше:
try {
    ...
} catch (SQLException e) {
    trow new RuntimeException(e); //SQLException будет записано в поле cause
}

Ещё лучше:
try {
    ...
} catch (SQLException e) {
    trow new RuntimeException("user data loading error", e); //сообщение, по которому можно будет найти ошибку в логах
}

5. В названиях пакетов не использовать заглавные буквы и нижнее подчёркивание
6. Названия полей кэмлкейсом с маленькой буквы (например, userDao, а не userDAO)
7. Названия классов кэмлкейсом с большой буквы
8. Названия констант большими буквами через нижнее подчёркивание
9. В классах сначала идут поля, потом конструкторы, потом методы. сначала public, потом protected, потом default, потом private.
   В entity-классах сначала @Id, потом @Version, потом остальные поля, потом связи
10. Ограничения в entity-классах должны соответствовать БД (not null, количество символов)
11. Использовать внедрение через конструктор в final-поля. Если по спецификации необходим конструктор без параметров, то можно использовать внедрение зависимостей через поля.
12. В проекте не должно быть закомментированного кода
13. Над всем, что public должен быть javaDoc. Исключение - в entity- и view-классах javaDoc можно писать над полями
14. Над методами, которые переопределяют методы из родительского класса или интерфейса должна стоять аннотация @Override
15. В каждом пакете должен быть файл package.html или package-info.java с описанием для чего этот пакет нужен
16. Всегда проверять параметры публичных методов

Maven
1. Версии зависимостей должны быть указаны в свойствах( https://maven.apache.org/pom.html#Properties )
2. Все зависимости должны быть вынесены в блок dependencyManagement файла pom.xml родительского модуля. В модулях в блоке dependencies указывать только groupId и artifactId

Git
1. В проекте должен быть .gitignore. Под гитом не должно быть файлов IDE или файлов сборки (например, директории target, build и т.п.).
2. В сообщении коммита писать, какие изменения были сделаны в этом коммите (например "Добавлен скрипт инициализации схемы БД", а не "Скрипт инициализации схемы БД")

